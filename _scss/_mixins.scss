// Breakpoints
$breakpoints: (
's'  : '(max-width: 600px)',
'm'  : '(max-width: 980px)',
'r'  : '(max-width: 1060px)',
'rv'  : '(min-width:' $site__width')'
);

@mixin b($point) {
    $query: map-get($breakpoints, $point);
    @media #{$query} {
        @content;
    }
}

// em converter
@function em($px, $base: $base__font-size) {
    @return ($px / $base) * 1rem;
}

// Circle
@mixin circle($width, $height: $width) {
    width: $width;
    height: $width;
    margin: auto;

    border-radius: 100%;
    background-size: cover;
}

// Line Height Converter
@mixin lh($fz, $lh: $fz*1.618) {
    font-size: ($fz / $base__font-size--raw) * 1rem;
    line-height: $lh / $fz;
}

// Not mixins but kinda work in here
.linked {
    position: relative;
}

.linker {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;

    width: 100%;
    height: 100%;
}

.entire-site--hidden {
    display: none;
}

.entire-site--visible {
    display: block;
}

// Shadows
$shadow__t-b: 0 28px 52px -20px rgba(darken($color__black, 10%), .5), 0 -28px 52px -20px rgba(darken($color__black, 10%), .5);
$shadow__t: 0 -28px 52px -20px rgba(darken($color__black, 10%), .5);
$shadow__b: 0 28px 52px -20px rgba(darken($color__black, 10%), .5);

// 102% Widths
@mixin oversized {
    position: relative;
    left: -1%;

    width: 102%;

    @include b(r) {
        position: static;
        left: 0;

        width: 100%;
    }
}
